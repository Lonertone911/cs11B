stages:
  - test
  - deploy

test:
  tags: 
    - docker
  stage: test
  script:
    # this configures Django application to use attached postgres database that is run on `postgres` host
    - export DJANGO_SETTINGS_MODULE=BusinessSimulator.testing_settings
    - export DATABASE="postgres://uqlezddabigfjl:a7ca37526b7c369d2add23649cc852200b856cfa3047a2d867529ddd7ae37945@ec2-34-252-251-16.eu-west-1.compute.amazonaws.com:5432/d19omnqd3p1tpc"
    - apk add --no-cache curl jq python3 py3-pip
    - pip install -U pip setuptools
    - pip install wheel
    - apk add -U --no-cache bash python3 python3-dev libpq postgresql-dev unixodbc-dev musl-dev g++ libffi-dev libxml2-dev clang
    - apk --update add libxml2-dev libxslt-dev libffi-dev gcc musl-dev libgcc openssl-dev curl
    - apk add jpeg-dev zlib-dev freetype-dev lcms2-dev openjpeg-dev tiff-dev tk-dev tcl-dev
    - pip3 install -r requirements.txt --ignore-installed six --user
    - python3 manage.py migrate simulatorApp
    - python3 manage.py test

staging:
  tags: 
    - docker
  stage: deploy
  script:
    - apk add --no-cache bash
    - apk update && apk add --virtual build-dependencies build-base
    - apk add ruby
    - apk add ruby-full
    - apk add ruby-dev
    - apk add git
    - apk --no-cache add curl
    - gem install dpl --pre
    - gem install dpl-heroku
    - gem install bundler
    - dpl --provider=heroku --app=yescot --api-key=$HEROKU_STAGING_API_KEY
  only:
    - master